from datetime import datetime, timedelta
import yfinance as yf
import pandas as pd

df_holdings = pd.read_csv("holdings.csv")
df_trans = pd.read_csv("transactions.csv")


class TimeFrame:
    
    ''' Most abstract object'''

    def __init__ (self, 
                  startday:str, 
                  endday:str
                  ):
        
        #days as str
        self.startday_str = startday #string
        self.endday_str = endday #string
        #days as datetime
        self.startday_dt = datetime.strptime(startday, '%Y-%m-%d') #DateTime object YYYY-MM-DD 00:00:00
        self.endday_dt = datetime.strptime(endday, '%Y-%m-%d') #DateTime object YYYY-MM-DD 00:00:00
        
        self.list_days_dt = self._list_days() #a list of all the days in the Time period
        self.list_days_str = self._list_days(as_str = True)
        self.numdays = len(self.list_days_str)

        #populated with portfolio data
        self.portfolios = list()
        self.transaction_date = dict()
        self.transactions_df = dict() 
        self.init_holdings_port = dict()
        self.numport = 0

        self.IndividualDays_instances = dict() #generates a dictionary with all the individual days as keys and the object as values

    def _list_days(self, as_str:bool = False):
        days = []
        current_date = self.startday_dt
        
        while current_date <= self.endday_dt:
            if as_str:
                days.append(current_date.strftime('%Y-%m-%d'))
            else:
                days.append(current_date)
            current_date += timedelta(days=1)        
        return days
    
    def genportfolio(self, holdings_df:pd.DataFrame, transactions_df:pd.DataFrame, name:str):
        ''' To generate one individual portfolio without creating the instances but rather the metadata in TP class object'''
        self.portfolios.append(name)
        self.transaction_date[name] = transactions_df["Date"].tolist()
        self.transactions_df[name] = transactions_df
        self.init_holdings_port[name] = holdings_df 
        self.numport += 1

    def gendays(self):
        '''Execute once all the portfolios are generated by the user'''
        _temp_dict = dict()
        for day in self.list_days_str:
            _start_day_bool = True if day == self.startday_str else False
            _temp_dict[day] = IndividualDay(day, self.portfolios, self.transaction_date, self.init_holdings_port, self.transactions_df, is_start_day= _start_day_bool)
        self.IndividualDays_instances = _temp_dict

class IndividualDay:
    ''' This object maps an individual day'''
    def __init__(self, day:str, portfolios:list, transaction_date:dict, init_holdings_port:dict, transactions_df:dict, is_start_day:bool):
        
        self.day_str = day
        self.day_dt = datetime.strptime(day, '%Y-%m-%d')
        self.is_start_day = is_start_day #bool that tells us if it is the first day of the portfolios
        
        self.day_week = self.day_dt.weekday()
        self.is_weekday = True if self.day_week < 5 else False
        self.portfolios_list = portfolios #list of ports
        self.num_portfolio = 0
        self.transaction_date = transaction_date
        self.init_holding_port = init_holdings_port
        self.transaction_df = transactions_df

        self.portfolio_instances = dict()
        self.create_portfolio()


    def create_portfolio(self):
        for port in self.portfolios_list:
            trans = True if self.day_str in self.transaction_date[port] else False #bool that tells us if it is a transaction date
            self.portfolio_instances[port] = Portfolio(port, 
                                                       val_day=self.day_str,
                                                       is_trans_day=trans,
                                                       init_holdings = self.init_holding_port[port],
                                                       transactions = self.transaction_df[port],
                                                       is_start_day = self.is_start_day)
            self.num_portfolio += 1






class Portfolio:
    
    ''' This modules a portfolio on a SPECIFIC day'''
    
    def __init__(self, name:str, val_day:str, is_trans_day:bool, init_holdings:pd.DataFrame, transactions:pd.DataFrame, is_start_day:bool):
        
        #admin
        self.name = name
        self.val_day_str = val_day
        self.val_day_dt = datetime.strptime(val_day, '%Y-%m-%d')
        self.prev_day = self.val_day_dt - timedelta(days = 1)
        self.prev_day_str = self.prev_day.strftime("%Y-%m-%d")

        #holdings
        self.is_start_day = is_start_day
        self.init_holdings = init_holdings

        #transactions
        self.is_trans_day = is_trans_day
        self.transactions = transactions
        if self.is_trans_day:
            self._adjustholdings()  
        
        #valuations
        self.price_df = pd.DataFrame()
        self.valuation = None

    def _adjustholdings(self):
        pass
    







def test_TimeFrame(user_input):
    attributes = dir(user_input)
    attributes = [attr for attr in attributes if not attr.startswith('__')]
    for attr in attributes:
        value = getattr(user_input, attr)
        print(f"{attr}: {value}")


TS = TimeFrame('2024-01-01','2024-01-10')
TS.genportfolio(df_holdings,df_trans, "EQTY")
TS.genportfolio(df_holdings,df_trans, "FRG EQTY")
TS.gendays()




print("THIS IS AN INDIVIDUAL Timeframe")
test_TimeFrame(TS)
print("THIS IS AN INDIVIDUAL DAY INSTANCE")
test_TimeFrame(TS.IndividualDays_instances["2024-01-06"])
print("THIS IS AN INDIVIDUAL PORTFOLIO")
test_TimeFrame(TS.IndividualDays_instances["2024-01-06"].portfolio_instances["EQTY"])

